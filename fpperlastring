#!/usr/bin/perl

use warnings;
use strict;
use Getopt::Long;

#process command line arguments

#my $man_page;
#GetOptions ('man' => \$man_page) or die "Usage:";
#if ($man_page){
#        my $man = "Welcome to Group A's Sequence analysis pipeline.
#        this is the first element of the pipeline, coded by Maximilien Rothier Bautzer.
#        \nThis program will open and process the fasta file. It will begin by separating the
#        DNA into 6 reading frames, 3 in the forward strand and 3 in the reverse strand.
#        Each of those strands are then translated into proteins using the hash. They are then
#        split at start and stop codons. In the protein sequence they are noted as 'M' (methioin)
#        for the start codon and a simple '*' for stop codons. An exeption is made for codons containing 'n',
#        which denotes that we are unsure about that nucleotide position. Those string values
#        are pushed into arrays (one for each reading frames). The code then looks for array elements
#        shorter than 50 nucleotides, which is too small to be considered relevant. Those small elements
#        are then deleted. The array values are then printed in the appropriate format. Information such
#        as Open reading frame (ORF) length and which frame it was found in is provided, along with the name of the organism.
#        Frames 1, 2 and 3 are from the forward strand and frames 4,5, and 6 are in the reverse strand.";
#        $man =~ s/(.{1,40})/$1\n/gs;
#        print $man
#}

#hash for translation

my %DNAtoAA = (
        "AAA" => "K", "AAC" => "N", "AAG" => "K", "AAT" => "N",
        "ACA" => "T", "ACC" => "T", "ACG" => "T", "ACT" => "T",
        "AGA" => "R", "AGC" => "S", "AGG" => "R", "AGT" => "S",
        "ATA" => "I", "ATC" => "I", "ATG" => "M", "ATT" => "I",
        "CAA" => "Q", "CAC" => "H", "CAG" => "Q", "CAT" => "H",
        "CCA" => "P", "CCC" => "P", "CCG" => "P", "CCT" => "P",
        "CGA" => "R", "CGC" => "R", "CGG" => "R", "CGT" => "R",
        "CTA" => "L", "CTC" => "L", "CTG" => "L", "CTT" => "L",
        "GAA" => "E", "GAC" => "D", "GAG" => "E", "GAT" => "D",
        "GCA" => "A", "GCC" => "A", "GCG" => "A", "GCT" => "A",
        "GGA" => "G", "GGC" => "G", "GGG" => "G", "GGT" => "G",
        "GTA" => "V", "GTC" => "V", "GTG" => "V", "GTT" => "V",
        "TAA" => "*", "TAC" => "Y", "TAG" => "*", "TAT" => "Y",
        "TCA" => "S", "TCC" => "S", "TCG" => "S", "TCT" => "S",
        "TGA" => "*", "TGC" => "C", "TGG" => "W", "TGT" => "C",
        "TTA" => "L", "TTC" => "F", "TTG" => "L", "TTT" => "F" );

#declare global variables

my ($organism, $chomped_fasta, $fs1, $fs2, $fs3, $rs1, $rs2, $rs3, @tfs1, @tfs2, @tfs3, @trs1, @trs2, @trs3, $tfs1, $tfs2, $tfs3, $trs1, $trs2, $trs3, @sorted_ORF, @name_seq, $fastafile,);

#opens the fasta file or gives the relevant error message

print "which file would you like to open?\n";

($fastafile ) = <>;

open (FH , $fastafile ) or die "\nFailed to open file $!";


#turn the file into one long string

while ( <FH>) {
        chomp $_;
        $chomped_fasta .= $_;
}

#extract the organism name

@name_seq = split /sequence/, $chomped_fasta;
$organism = $name_seq [0];

#initiate forward and reverse strands

$fs1 = $name_seq [1];
$rs1 = reverse($fs1 );

#split into the 3 reading frames

$fs2 = substr $fs1, 1;
$fs3 = substr $fs2, 1;

$rs2 = substr $rs1, 1;
$rs3 = substr $rs2, 1;

#translate the sequence using the hash, excluding codons containing the (lower case) letter 'n'

for (my $i =0;$i<=length($fs1)-2;$i+=3) {
        $_= substr $fs1, $i , 3;
        if ($_ !~ m/.*n.*|n.*|.*n/) {
                my $temp = uc$_;
                my $translated_value = $DNAtoAA{$temp};
                push @tfs1, $translated_value;
        }
}

for (my $i =0;$i<=length($fs2)-2;$i+=3) {
        $_= substr $fs2, $i , 3;
        if ($_ !~ m/.*n.*|n.*|.*n/) {
                my $temp = uc$_;
                my $translated_value = $DNAtoAA{$temp};
                push @tfs2, $translated_value;
        }
}

for (my $i =0;$i<=length($fs3)-2;$i+=3) {
        $_= substr $fs3, $i , 3;
        if ($_ !~ m/.*n.*|n.*|.*n/) {
                my $temp = uc$_;
                my $translated_value = $DNAtoAA{$temp};
                push @tfs3, $translated_value;
        }
}

for (my $i =0;$i<=length($rs1)-2;$i+=3) {
        $_= substr $rs1, $i , 3;
        if ($_ !~ m/.*n.*|n.*|.*n/) {
                my $temp = uc$_;
                my $translated_value = $DNAtoAA{$temp};
                push @trs1, $translated_value;
        }
}

for (my $i =0;$i<=length($rs2)-2;$i+=3) {
        $_= substr $rs2, $i , 3;
        if ($_ !~ m/.*n.*|n.*|.*n/) {
                my $temp = uc$_;
                my $translated_value = $DNAtoAA{$temp};
                push @trs2, $translated_value;
        }
}

for (my $i =0;$i<=length($rs3)-2;$i+=3) {
        $_= substr $rs3, $i , 3;
        if ($_ !~ m/.*n.*|n.*|.*n/) {
                my $temp = uc$_;
                my $translated_value = $DNAtoAA{$temp};
                push @trs3, $translated_value;
        }
}

#merge the translated sequences into one long string

$tfs1 = join '' , @tfs1;
$tfs2 = join '' , @tfs2;
$tfs3 = join '' , @tfs3;

$trs1 = join '' , @trs1;
$trs2 = join '' , @trs2;
$trs3 = join '' , @trs3;

#split translated sequences into ORF

my @ORF_F1= split /[M*]/, $tfs1;
my @ORF_F2= split /[M*]/, $tfs2;
my @ORF_F3= split /[M*]/, $tfs3;

my @ORF_F4= split /[M*]/, $trs1;
my @ORF_F5= split /[M*]/, $trs2;
my @ORF_F6= split /[M*]/, $trs3;

#ignore ORFs less than 100 amino acid long

foreach (@ORF_F1) {
        @ORF_F1 = grep length($_) >= 100, @ORF_F1;
}
foreach (@ORF_F2) {
        @ORF_F2 = grep length($_) >= 100, @ORF_F2;
}
foreach (@ORF_F3) {
        @ORF_F3 = grep length($_) >= 100, @ORF_F3;
}
foreach (@ORF_F4) {
        @ORF_F4 = grep length($_) >= 100, @ORF_F4;
}
foreach (@ORF_F5) {
        @ORF_F5 = grep length($_) >= 100, @ORF_F5;
}
foreach (@ORF_F6) {
        @ORF_F6 = grep length($_) >= 100, @ORF_F6;
}

#print results

my $ORF_count=1;

foreach (@ORF_F1) {
        my $ORF_length = length ($_);
        print "$organism"."_ORF_F1_".($ORF_count)."_length: ".($ORF_length)."\nM$_\n";
        $ORF_count++;
}
foreach (@ORF_F2) {
        my $ORF_length = length ($_);
        print "$organism"."_ORF_F2_".($ORF_count)."_length: ".($ORF_length)."\nM$_\n";
        $ORF_count++;
}
foreach (@ORF_F3) {
        my $ORF_length = length ($_);
        print "$organism"."_ORF_F3_".($ORF_count)."_length: ".($ORF_length)."\nM$_\n";
        $ORF_count++;
}
foreach (@ORF_F4) {
        my $ORF_length = length ($_);
        print "$organism"."_ORF_F4_".($ORF_count)."_length: ".($ORF_length)."\nM$_\n";
        $ORF_count++;
}
foreach (@ORF_F5) {
        my $ORF_length = length ($_);
        print "$organism"."_ORF_F5_".($ORF_count)."_length: ".($ORF_length)."\nM$_\n";
        $ORF_count++;
}
foreach (@ORF_F6) {
        my $ORF_length = length ($_);
        print "$organism"."_ORF_F6_".($ORF_count)."_length: ".($ORF_length)."\nM$_\n";
        $ORF_count++;
}

exit;