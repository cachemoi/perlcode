#!/usr/bin/perl

use warnings;
use strict;
use Getopt::Std;

#hash for translation

my %DNAtoAA = (
        "AAA" => "K", "AAC" => "N", "AAG" => "K", "AAT" => "N",
        "ACA" => "T", "ACC" => "T", "ACG" => "T", "ACT" => "T",
        "AGA" => "R", "AGC" => "S", "AGG" => "R", "AGT" => "S",
        "ATA" => "I", "ATC" => "I", "ATG" => "M", "ATT" => "I",
        "CAA" => "Q", "CAC" => "H", "CAG" => "Q", "CAT" => "H",
        "CCA" => "P", "CCC" => "P", "CCG" => "P", "CCT" => "P",
        "CGA" => "R", "CGC" => "R", "CGG" => "R", "CGT" => "R",
        "CTA" => "L", "CTC" => "L", "CTG" => "L", "CTT" => "L",
        "GAA" => "E", "GAC" => "D", "GAG" => "E", "GAT" => "D",
        "GCA" => "A", "GCC" => "A", "GCG" => "A", "GCT" => "A",
        "GGA" => "G", "GGC" => "G", "GGG" => "G", "GGT" => "G",
        "GTA" => "V", "GTC" => "V", "GTG" => "V", "GTT" => "V",
        "TAA" => "*", "TAC" => "Y", "TAG" => "*", "TAT" => "Y",
        "TCA" => "S", "TCC" => "S", "TCG" => "S", "TCT" => "S",
        "TGA" => "*", "TGC" => "C", "TGG" => "W", "TGT" => "C",
        "TTA" => "L", "TTC" => "F", "TTG" => "L", "TTT" => "F" );

#declare variables

my ($organism, $chomped_fasta, $fs1, $rs1, @name_seq, $fastafile, @tfs1, $tfs1);

#opens the fasta file or gives the relevant error message

print "which file would you like to open?\n";

($fastafile ) = <STDIN>;

open (FH , $fastafile ) or die "\nFailed to open file $!";


#turn the file into one long string

while ( <FH>) {
        chomp $_;
        $chomped_fasta .= $_;
}

#extract the organism name

@name_seq = split /sequence/, $chomped_fasta;
$organism = $name_seq [0];

#initiate forward and reverse strands

$fs1 = $name_seq [1];
$rs1 = reverse($fs1 );

#split into the 3 reading frames

my $fs2 = substr $fs1, 1;
my $fs3 = substr $fs2, 1;

my $rs2 = substr $rs1, 1;
my $rs3 = substr $rs2, 1;

#translate the sequence using the hash

#while (length ($fs1) <= length ($fs1)-2) {
#        for (my $i=0 ; length ($fs1) <= length ($fs1)-2 ; $i+=3){
#                foreach my $key (keys %DNAtoAA) {
#                $tfs1 =~ s/$key/$DNAtoAA{$key}/g;
#        }
#    }
#}

for (my $i =0;$i<=length($fs1)-2;$i+=3) {
        $_= substr $fs1, $i , 3;
        my $temp = uc$_;
        my $translated_value = $DNAtoAA{$temp};
        push @tfs1, $translated_value;
}

#merge the translated sequence into one long string

$tfs1 = join '' , @tfs1;

#split translated sequence into ORF

my @ORF= split /[M*]/, $tfs1;

#my @ORF = 

#print results

#foreach my $ORFspec (@ORF) {
#        print "\n$organism\n$ORFspec\n"
#}

#test

foreach (@ORF) {
        print ",$_,";
}


exit; 